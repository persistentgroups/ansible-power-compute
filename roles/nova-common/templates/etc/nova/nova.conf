[DEFAULT]
debug = {{ nova.logging.debug }}
verbose = {{ nova.logging.verbose }}

osapi_compute_listen_port={{ endpoints.nova.port.backend_api }}

# Policy #
allow_resize_to_same_host = True

# Logging #
use_syslog = False
syslog_log_facility = LOG_LOCAL0

log_dir = /var/log/nova

multi_host=True
send_arp_for_ha=true

enabled_apis = ec2,osapi_compute,metadata

default_availability_zone = {{ nova.default_availability_zone }}

scheduler_host_manager={{ nova.scheduler_host_manager }}
compute_manager={{ nova.compute_manager }}
cpu_allocation_ratio={{ nova.cpu_allocation_ratio }}

# Paths to important items #
state_path={{ nova.state_path }}
rootwrap_config=/etc/nova/rootwrap.conf
api_paste_config=/etc/nova/api-paste.ini
keys_path={{ nova.state_path }}/keys

# Auth
use_deprecated_auth=false
auth_strategy=keystone
use_forwarded_for=true

# Vnc configuration
novnc_enabled=false
novncproxy_base_url={{ endpoints.novnc.url.internal }}/vnc_auto.html
novncproxy_port={{ endpoints.novnc.port.backend_api }}
vncserver_proxyclient_address={{ primary_ip }}
vncserver_listen={{ primary_ip }}

# Networking #
network_api_class=nova.network.neutronv2.api.API
default_floating_pool={{ nova.floating_pool }}
{% if neutron.plugin == 'ml2' and neutron.mech_driver == 'linuxbridge' %}
linuxnet_interface_driver =
libvirt_vif_driver=nova.virt.libvirt.vif.LibvirtGenericVIFDriver

{% elif neutron.plugin == 'ml2' and neutron.mech_driver == 'ovs' %}
linuxnet_interface_driver=nova.network.linux_net.LinuxOVSInterfaceDriver
libvirt_vif_driver=nova.virt.libvirt.vif.LibvirtHybridOVSBridgeDriver
{% endif %}

# Require Neutron callback to boot instance
vif_plugging_is_fatal = True
vif_plugging_timeout = 300

security_group_api=neutron
firewall_driver=nova.virt.firewall.NoopFirewallDriver

dhcpbridge_flagfile = /etc/nova/nova.conf
dhcpbridge=/usr/local/bin/nova-dhcpbridge

# Set my_ip so that we explicitly define the IP we can be reached
# at by other hypervisors
my_ip = {{ hostvars[inventory_hostname][primary_interface_compute]['ipv4']['address'] }}

# Cinder #
volume_api_class=nova.volume.cinder.API
osapi_volume_listen_port=5900
block_device_allocate_retries={{ nova.block_device_allocate_retries }}
block_device_allocate_retries_interval={{ nova.block_device_allocate_retries_interval }}


# misc #
compute_driver={{ nova.compute_driver }}


[database]
connection=mysql://nova:{{ secrets.nova_db_password }}@{{ endpoints.db }}/nova?charset=utf8

[libvirt]
virt_type={{ nova.libvirt_type }}
{% if nova.libvirt_cpu_model -%}
cpu_mode = custom
cpu_model = {{ nova.libvirt_cpu_model }}
{% elif nova.libvirt_cpu_model and ansible_architecture == "ppc64le" %}
cpu_mode = host-passthrough
{% else %}
{% if ansible_os_family == "Ibm_powerkvm" %}
cpu_mode = host-passthrough
{% else %}
cpu_mode = host-model
{% endif -%}
{% endif -%}


{% if ceph.enabled and nova.backend_ceph -%}
images_type = rbd
images_rbd_pool = {{ ceph.pool_name }}
images_rbd_ceph_conf = {{ ceph.cinder.rbd_ceph_conf }}
rbd_user = {{ ceph.cinder.rbd_user }}
rbd_secret_uuid = {{ cinder_uuid_file.content | b64decode }}
inject_password = false
inject_key = false
inject_partition = -2
live_migration_flag="VIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_LIVE,VIR_MIGRATE_PERSIST_DEST,VIR_MIGRATE_TUNNELLED"
hw_disk_discard = unmap # enable discard support (be careful of performance)
{% endif %}

disk_cachemodes="network=writeback"

[conductor]
use_local = False
workers = {{ nova.conductor_workers }}

[oslo_concurrency]
lock_path = {{ nova.state_path }}/lock

[keystone_authtoken]
identity_uri = {{ endpoints.keystone.url.admin }}
auth_uri = {{ endpoints.keystone.url.internal }}/{{ endpoints.keystone.version }}
admin_tenant_name = {{ admin_tenant_name|default("service") }}
admin_user = nova
admin_password = {{ secrets.nova_service_password }}
signing_dir = /var/cache/nova/api
cafile = {{ nova.cafile }}

[neutron]
url={{ endpoints.neutron.url.internal }}
auth_strategy=keystone
admin_tenant_name= {{ admin_tenant_name|default("service") }}
admin_username=neutron
admin_password={{ secrets.neutron_service_password }}
admin_auth_url={{ endpoints.keystone.url.admin}}/{{ endpoints.keystone.version }}
ca_certificates_file={{ nova.cafile }}

service_metadata_proxy=true
metadata_proxy_shared_secret={{ secrets.metadata_proxy_shared_secret }}

[glance]
api_servers={{ nova.glance_endpoint }}

[cinder]
catalog_info = volumev2:cinderv2:publicURL
ca_certificates_file = {{ nova.cafile }}

[oslo_messaging_rabbit]
{% macro rabbitmq_hosts() -%}
{% for host in groups['controller'] -%}
   {% if loop.last -%}
{{ hostvars[host][primary_interface_controller]['ipv4']['address'] }}:{{ rabbitmq.port }}
   {%- else -%}
{{ hostvars[host][primary_interface_controller]['ipv4']['address'] }}:{{ rabbitmq.port }},
   {%- endif -%}
{% endfor -%}
{% endmacro -%}

# Rabbit #
heartbeat_timeout_threshold = {{ nova.heartbeat_timeout_threshold }}
{% if rabbitmq.cluster -%}
rabbit_hosts={{ rabbitmq_hosts() }}
{% else -%}
rabbit_host={{ endpoints.rabbit }}
rabbit_port=5672
{% endif -%}
rabbit_userid={{ rabbitmq.user }}
rabbit_password={{ secrets.rabbit_password }}
