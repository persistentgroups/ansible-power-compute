[DEFAULT]
debug = {{ nova.logging.debug }}
verbose = {{ nova.logging.verbose }}

osapi_compute_listen_port={{ endpoints.nova.port.backend_api }}

use_neutron = True
iscsi_helper = tgtadm
libvirt_use_virtio_for_bridges = True
connection_type = libvirt
ec2_private_dns_show_ip = True
volumes_path = {{ nova.state_path }}/volumes

# Logging #
log_dir = /var/log/nova


enabled_apis = ec2,osapi_compute,metadata

# Paths to important items #
state_path={{ nova.state_path }}
root_helper = sudo /usr/local/bin/nova-rootwrap /etc/nova/rootwrap.conf
api_paste_config=/etc/nova/api-paste.ini
keys_path={{ nova.state_path }}/keys

# Networking #
network_api_class=nova.network.neutronv2.api.API
default_floating_pool={{ nova.floating_pool }}
{% if neutron.plugin == 'ml2' and neutron.mech_driver == 'linuxbridge' %}
linuxnet_interface_driver =

{% elif neutron.plugin == 'ml2' and neutron.mech_driver == 'ovs' %}
linuxnet_interface_driver=nova.network.linux_net.LinuxOVSInterfaceDriver
{% endif %}

security_group_api=neutron
firewall_driver=nova.virt.firewall.NoopFirewallDriver

dhcpbridge_flagfile = /etc/nova/nova.conf
dhcpbridge=/usr/local/bin/nova-dhcpbridge

# Set my_ip so that we explicitly define the IP we can be reached
# at by other hypervisors
my_ip = {{ hostvars[inventory_hostname][primary_interface_compute]['ipv4']['address'] }}


# misc #
compute_driver={{ nova.compute_driver }}

[vnc]
novncproxy_base_url={{ endpoints.novnc.url.internal }}/vnc_auto.html
novncproxy_port={{ endpoints.novnc.port.backend_api }}
vncserver_proxyclient_address={{ primary_ip }}
vncserver_listen={{ primary_ip }}


[database]
connection=mysql://nova:{{ secrets.nova_db_password }}@{{ endpoints.db }}/nova?charset=utf8

[libvirt]
virt_type={{ nova.libvirt_type }}
{% if nova.libvirt_cpu_model -%}
cpu_mode = custom
cpu_model = {{ nova.libvirt_cpu_model }}
{% elif nova.libvirt_cpu_model and ansible_architecture == "ppc64le" %}
cpu_mode = host-passthrough
{% else %}
{% if ansible_os_family == "Ibm_powerkvm" %}
cpu_mode = host-passthrough
{% else %}
cpu_mode = host-model
{% endif -%}
{% endif -%}


{% if ceph.enabled and nova.backend_ceph -%}
images_type = rbd
images_rbd_pool = {{ ceph.pool_name }}
images_rbd_ceph_conf = {{ ceph.cinder.rbd_ceph_conf }}
rbd_user = {{ ceph.cinder.rbd_user }}
rbd_secret_uuid = {{ cinder_uuid_file.content | b64decode }}
inject_password = false
inject_key = false
inject_partition = -2
live_migration_flag="VIR_MIGRATE_UNDEFINE_SOURCE,VIR_MIGRATE_PEER2PEER,VIR_MIGRATE_LIVE,VIR_MIGRATE_PERSIST_DEST,VIR_MIGRATE_TUNNELLED"
hw_disk_discard = unmap # enable discard support (be careful of performance)
{% endif %}

disk_cachemodes="network=writeback"

[oslo_concurrency]
lock_path = {{ nova.state_path }}/lock

[keystone_authtoken]
auth_uri = {{ endpoints.keystone.url.internal }}/{{ endpoints.keystone.version }}
auth_url = {{ endpoints.keystone.url.admin }}
auth_type = password
project_name  = {{ admin_tenant_name|default("service") }}
user = nova
password = {{ secrets.nova_service_password }}
signing_dir = /var/cache/nova/api
cafile = {{ nova.cafile }}
{% if endpoints.keystone.version == "v3" -%}
project_domain_id = default
user_domain_id = default
{% endif -%}

[neutron]
url={{ endpoints.neutron.url.internal }}
auth_strategy=keystone
project_name= {{ admin_tenant_name|default("service") }}
username=neutron
password={{ secrets.neutron_service_password }}
auth_url={{ endpoints.keystone.url.admin}}/{{ endpoints.keystone.version }}
auth_type = password
ca_certificates_file={{ nova.cafile }}
{% if endpoints.keystone.version == "v3" -%}
project_domain_id = default
user_domain_id = default
{% endif -%}
service_metadata_proxy=true
metadata_proxy_shared_secret={{ secrets.metadata_proxy_shared_secret }}

[glance]
api_servers={{ nova.glance_endpoint }}

[cinder]
catalog_info = volumev2:cinderv2:publicURL
ca_certificates_file = {{ nova.cafile }}

[oslo_messaging_rabbit]
{% macro rabbitmq_hosts() -%}
{% for host in groups['controller'] -%}
   {% if loop.last -%}
{{ hostvars[host][primary_interface_controller]['ipv4']['address'] }}:{{ rabbitmq.port }}
   {%- else -%}
{{ hostvars[host][primary_interface_controller]['ipv4']['address'] }}:{{ rabbitmq.port }},
   {%- endif -%}
{% endfor -%}
{% endmacro -%}

# Rabbit #
heartbeat_timeout_threshold = {{ nova.heartbeat_timeout_threshold }}
{% if rabbitmq.cluster -%}
rabbit_hosts={{ rabbitmq_hosts() }}
{% else -%}
rabbit_host={{ endpoints.rabbit }}
rabbit_port=5672
{% endif -%}
rabbit_userid={{ rabbitmq.user }}
rabbit_password={{ secrets.rabbit_password }}
